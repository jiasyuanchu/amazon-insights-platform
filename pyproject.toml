[project]
name = "amazon-insights-platform"
version = "0.1.0"
description = "B2B SaaS platform for Amazon sellers providing business intelligence insights, competitive analysis, and optimization suggestions"
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}

dependencies = [
    "fastapi>=0.115.0",
    "uvicorn[standard]>=0.32.0",
    "pydantic>=2.9.0",
    "pydantic-settings>=2.5.0",
    "sqlalchemy>=2.0.36",
    "alembic>=1.14.0",
    "asyncpg>=0.30.0",
    "psycopg2-binary>=2.9.10",
    "redis>=5.2.0",
    "celery>=5.4.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.12",
    "httpx>=0.27.2",
    "openai>=1.55.0",
    "tenacity>=9.0.0",
    "python-dotenv>=1.0.1",
    "structlog>=24.4.0",
    "prometheus-client>=0.21.0",
    "sentry-sdk>=2.18.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.0",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=5.0.0",
    "pytest-env>=1.1.5",
    "pytest-mock>=3.14.0",
    "factory-boy>=3.3.1",
    "faker>=30.8.0",
    "black>=24.10.0",
    "ruff>=0.7.3",
    "mypy>=1.13.0",
    "pre-commit>=4.0.1",
    "ipython>=8.29.0",
    "rich>=13.9.0"
]

[build-system]
requires = ["setuptools>=75.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["src"]

[tool.black]
line-length = 100
target-version = ["py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
  migrations
)/
'''

[tool.ruff]
line-length = 100
target-version = "py311"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
]
exclude = [
    ".git",
    ".ruff_cache",
    "__pycache__",
    "migrations",
    "venv",
    ".venv",
]

[tool.ruff.isort]
known-first-party = ["src"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true
exclude = ["migrations/", "tests/"]

[tool.pytest.ini_options]
minversion = "8.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=70",
]
asyncio_mode = "auto"
env = [
    "ENVIRONMENT=test",
    "DATABASE_URL=postgresql://test:test@localhost:5432/test_db",
    "REDIS_URL=redis://localhost:6379/1",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/migrations/*",
    "*/tests/*",
    "*/__init__.py",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false